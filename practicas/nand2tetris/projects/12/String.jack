// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array chars;
    field int len;
    field int maxLen;

    /** constructs a new empty string with a maximum len of maxLength
     *  and initial len of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        } else {
            if (maxLength > 0) {  // Do not init chars when length is 0
                let chars = Array.new(maxLength);
            }
        }

        let len = 0;
        let maxLen = maxLength;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLen > 0) {
            do chars.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current len of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j > -1) & (j < len)) {
            return chars[j];
        } else {
            do Sys.error(15);
            return 0;
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j > -1) & (j < len)) {
            let chars[j] = c;
        } else {
            do Sys.error(16);
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < maxLen) {
            let chars[len] = c;
            let len = len + 1;
        } else {
            do Sys.error(17);
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
        } else {
            do Sys.error(18);
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i;
        var boolean isPos;

        let isPos = true;
        let val = 0;
        let i = 0;

        if (chars[0] = 45) {  // `-`
            let isPos = false;
            let i = 1;
        }

        while (i < len) {
            let val = val * 10 + String.charToInt(chars[i]);
            let i = i + 1;
        }

        if (isPos) {
            return val;
        } else {
            return -val;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;

        if (val < 0) {
            do appendChar(45);  // `-`
            let val = -val;
        }

        do _recurse_set_int(val);

        return;

    }

    /** Recursive implementation of setInt, assumes a non-negative input. */
    method void _recurse_set_int(int val) {
        var char c;

        let c = String.intToChar(Math.mod(val, 10));

        if (val < 10) {
            do appendChar(c);
        } else {
            do _recurse_set_int(val / 10);
            do appendChar(c);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    /** Returns an integer value of a digit character (0 if not a digit) */
    function int charToInt(char c) {
        if ((c > 47) & (c < 58)) {
            return (c - 48);
        } else {
            return 0;
        }
    }

    /** Returns a character made from a non-negative integer */
    function char intToChar(int x) {
        if ((x > -1) & (x < 10)) {
            return x + 48;
        } else {
            do Sys.error(22);
            return 0;
        }
    }
}
