/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */
 // Tiene como entradas un vector 'in' tamaño 16 y variables
 // que seran los indicativos de incremento, reinicio y carga
 // Para cumplir los requerimiento que se pide se toman del
 // menos al más importante(inc,load,reset) respectivamete 
 // comenzamos con un Chip Inc16 el cual incrementará la variable data
 // a un Mux16 se pasa como entradas la 'data' y la 'dataInc' y como
 // selector la variable 'Inc' el out de este Mux16 lo tomamos como 
 // una entrada para un siguiente Mux16 y la otra entrada es el vector 'in'
 // como selector tendrá load, de igual manera la salida de este será la entrada 
 // de otro Mux16 tomando como la otra entrada  'false' y el selector 'reset'
 // por ultimo este out 'v3' será la entrada del Chip register y este dá el out final

CHIP PC {
    // En el Chip PC tenemos 4 posibles casos
    // resetear, sustituir,incrementar,mantener
    // para decidir cual de estas 4 salidas retornamos
    // implementamos una secuencia de Mux16
    // primero decidimos entre mantener o incrementar
    // seguido de decidir entre la salida anterior y sustituir
    // para finalmente decidir entre la salida anterior o resetear
    // Debido al funcionamiento de los Mux16 para implementar
    // las condiciones en el orden indicado, esta son evaluadas
    // desde la ultima hasta la primera, la salida final
    // es almacenada en una Registro de 16 Bitsn y la variable data

    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:

    Inc16(in=data, out=dataInc);

    Mux16(a=data, b=dataInc, sel=inc, out=v1);

    Mux16(a=v1, b=in, sel=load, out=v2);
    
    Mux16(a=v2, b=false, sel=reset, out=v3);

    Register(in=v3, load=true, out=data, out=out);
}
