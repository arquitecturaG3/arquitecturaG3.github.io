/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */
 // Se tiene como entradas dos vectores 'in' tamaño 16 y
 // 'address' tamaño 6 y una entrada load, siendo los índices
 // del 3 al 5 de 'address' 
 // los selectores de los Chip DMux8Way y Mux8Way16;
 // primero pasamos los datos por el DMux8Way el cual nos dará 
 // el valor de los load para los siguientes ocho Chip  RAM8
 // la cual usa los  índices del 0 al 2 de 'address' 
 // y estos Chip sus 'out' seran las entradas para el chip Mux8Way16
 // hallando  este ultimo el 'out' esperado

CHIP RAM64 {
    // La RAM64 se puede ver como la implementacion de 8 RAM8
    // y a su vez su implementacion es similiar a la de la RAM8
    // solo que en este caso sustituimos los Registros por RAM8
    // Usamos las primeras 3 posiciones de la entrada address
    // para las posiciones de las RAM8, y las ultimas 3 posiciones
    // para seleccionar cual de estas RAM8 seran actualizadas y 
    // posteriormente retornar su salida

    IN in[16], load, address[6];    
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[3..5], a=p0, b=p1, c=p2, d=p3, e=p4, f=p5, g=p6, h=p7);

    RAM8(in=in, load=p0, address=address[0..2], out=out0);
    RAM8(in=in, load=p1, address=address[0..2], out=out1);
    RAM8(in=in, load=p2, address=address[0..2], out=out2);
    RAM8(in=in, load=p3, address=address[0..2], out=out3);
    RAM8(in=in, load=p4, address=address[0..2], out=out4);
    RAM8(in=in, load=p5, address=address[0..2], out=out5);
    RAM8(in=in, load=p6, address=address[0..2], out=out6);
    RAM8(in=in, load=p7, address=address[0..2], out=out7);

    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address[3..5], out=out);
}
