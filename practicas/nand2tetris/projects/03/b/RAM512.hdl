/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */
 
 // Se tiene como entradas dos vectores 'in' tamaño 16 y
 // 'address' tamaño 9 y una entrada load, siendo los índices
 // del 6 al 8 de 'address' 
 // los selectores de los Chip DMux8Way y Mux8Way16;
 // primero pasamos los datos por el DMux8Way el cual nos dará 
 // el valor de los load para los siguientes ocho Chip  RAM64
 // la cual usa los  índices del 0 al 5 de 'address' 
 // y estos Chip sus 'out' seran las entradas para el chip Mux8Way16
 // hallando  este ultimo el 'out' esperado

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load,sel=address[6..8],a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h);

RAM64(in=in,load=a,address=address[0..5],out=oa);
RAM64(in=in,load=b,address=address[0..5],out=ob);
RAM64(in=in,load=c,address=address[0..5],out=oc);
RAM64(in=in,load=d,address=address[0..5],out=od);
RAM64(in=in,load=e,address=address[0..5],out=oe);
RAM64(in=in,load=f,address=address[0..5],out=of);
RAM64(in=in,load=g,address=address[0..5],out=og);
RAM64(in=in,load=h,address=address[0..5],out=oh);

Mux8Way16(a=oa,b=ob,c=oc,d=od,e=oe,f=of,g=og,h=oh,sel=address[6..8],out=out);
}
