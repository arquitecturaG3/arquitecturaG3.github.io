// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    // Variables auxiliares
    Not(in=instruction[15],out=instA);
    Not(in=instA,out=instC);

    // Mux16 entre el conjunto de intrucciones y el output del ALU
    // Su selector es instruction[15] en caso de que sea una intruccion C

    Mux16(a=instruction, b=outALU, sel=instC, out=AReg);

    // Control
    And(a=instruction[5], b=instC, out=d1); // instruction[5] = d1 para una C-instruction
    Or(a=d1, b=instA, out=sAReg);


    // Registro A
    ARegister(in=AReg, load=sAReg, out=A, out[0..14]=addressM);


     // y(A or inM ) control
    Mux16(a=A, b=inM, sel=instruction[12], out=AoM); // instruction[12] = a

    // Control
    And(a=instruction[4], b=instC, out=d2); // instruction[4] = d2 para una C-instruction

    // Registro
    DRegister(in=outALU, load=d2, out=D);


    ALU(x=D, y=AoM, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zr, ng=ng
    );

    // Escribir en M
    And(a=instruction[3], b=instC, out=writeM); // instruction[2] = d3 para una C-instruction

    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=pos);

    And(a=instruction[2], b=ng, out=jneg);
    And(a=instruction[1], b=zr, out=jzer);
    And(a=instruction[0], b=pos, out=jpos);

    Or(a=jneg, b=jzer, out=jzerneg);
    Or(a=jzerneg, b=jpos, out=jumpIfinstC); 

    And(a=jumpIfinstC, b=instC, out=jump);

    // PC
    PC(in=A, load=jump, inc=true, reset=reset, out[0..14]=pc);
}